@page "/producto"
@page "/producto/{id:int}"

@inject ICategoriaServicio categoriasServicio
@inject IProductoServicio productoServicio
@inject IToastService toastService
@inject NavigationManager _navServicio


<div class="row justify-content-center  mt-3">
    <p class="col-sm-12 col-md-8 col-xl-10 h4 mt-2">@Titulo</p>
</div>
<div class="row justify-content-center  mt-3">
    <div class="col-sm-12 col-md-8 col-xl-10">

        <EditForm Model="modelo" OnValidSubmit="GuardarCambios">
            <DataAnnotationsValidator></DataAnnotationsValidator>
            <ValidationSummary />

            <div class="input-group">
                <span class="input-group-text bg-light" id="basic-addon3">Nombre</span>
                <input type="text" class="form-control" @bind-value="modelo.Nombre">
            </div>
            <ValidationMessage For="@(()=>modelo.Nombre)" />

            <div class="input-group  mt-3">
                <span class="input-group-text bg-light">Descripcion</span>
                <textarea class="form-control" @bind="modelo.Descripcion"></textarea>

            </div>
            <ValidationMessage For="@(()=>modelo.Descripcion)" />

            <div class="input-group mt-3">
                <label class="input-group-text bg-light" for="inputGroupSelect01">Categoria</label>
                <select class="form-select" @bind="@modelo.IdCategoria">
                    @foreach (var item in listaCategoria)
                    {
                        <option value="@item.IdCategoria">@item.Nombre</option>
                    }
                </select>
            </div>

            <div class="input-group mt-3">
                <span class="input-group-text bg-light" id="basic-addon3">Precio</span>
                <input type="number" class="form-control" @bind-value="modelo.Precio">
            </div>
            <ValidationMessage For="@(()=>modelo.Precio)" />

            <div class="input-group mt-3">
                <span class="input-group-text bg-light" id="basic-addon3">Precio Oferta</span>
                <input type="number" class="form-control" @bind-value="modelo.PrecioOferta">
            </div>
            <ValidationMessage For="@(()=>modelo.PrecioOferta)" />

            <div class="input-group mt-3">
                <span class="input-group-text bg-light" id="basic-addon3">Cantidad</span>
                <input type="number" class="form-control" @bind-value="modelo.Cantidad">
            </div>
            <ValidationMessage For="@(()=>modelo.Cantidad)" />

            <div class="input-group mt-3">
                <label class="input-group-text bg-light">Imagen</label>
                <InputFile type="file" class="form-control" accept="image/png, image/gif, image/jpeg" OnChange="OnFileChange"></InputFile>
            </div>

            <div class="mt-3">
                <button type="submit" class="btn btn-primary" style="width:130px">@Boton</button>
                <a href="/productos" class="btn btn-secondary" style="width:130px">Volver</a>
            </div>
        </EditForm>




    </div>

</div>
@code {
    //Parámetro de entrada en la URL
    [Parameter]
    public int Id { get; set; }
    private string Titulo = "Nuevo Producto";
    private string Boton = "Crear";
    //Se necesitan las categorías para asignar a un producto
    private List<CategoriaDTO> listaCategoria { get; set; } = new List<CategoriaDTO>();
    private ProductoDTO modelo { get; set; } = new ProductoDTO();

    //Inicializamos nuestra lista categorias
    protected override async Task OnInitializedAsync()
    {
        var response = await categoriasServicio.Lista("");
        if (response.EsCorrecto)
        {
            listaCategoria = (List<CategoriaDTO>)response.Resultado!;
            if(listaCategoria.Any() && Id == 0)
            {
                modelo.IdCategoria = listaCategoria.First().IdCategoria;
            }
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        if (Id != 0)
        {
            Titulo = "Editar Producto";
            Boton = "Actualizar";

            var response = await productoServicio.Obtener(Id);
            if (response.EsCorrecto)
            {
                modelo = (ProductoDTO)response.Resultado;
            }
            else
            {
                toastService.ShowWarning(response.Mensaje);
            }
        }
    }

    void CambiarCategoria(ChangedEventArgs e)
    {
        modelo.IdCategoria = Convert.ToInt32(e.NewValue.ToString());
    }

    async Task OnFileChange(InputFileChangeEventArgs e)
    {
        FileInfo fileInfo = new FileInfo(e.File.Name);
        if (fileInfo.Extension.ToLower().Contains(".jpg") || fileInfo.Extension.ToLower().Contains(".png"))
        {
            var format = $"image/{fileInfo.Extension.Replace(".", "")}";
            //Hacemos un ajuste de imagen
            var resizeImage = await e.File.RequestImageFileAsync(format, 450, 300);

            var buffer = new byte[resizeImage.Size];
            await resizeImage.OpenReadStream().ReadAsync(buffer);
            var imageData = $"data:{format};base64,{Convert.ToBase64String(buffer)}";

            modelo.Imagen = imageData;
        }

    }

    private async Task GuardarCambios()
    {
        bool respuesta = true;
        string mensaje = string.Empty;

        if (Id != 0)
        {
            var response = await productoServicio.Editar(modelo);
            if (response.EsCorrecto)
            {
                mensaje = "Producto fue modificado";
            }
            else
            {
                respuesta = false;
                mensaje = "No se pudo editar";
            }
        }
        else
        {
            var response = await productoServicio.Crear(modelo);
            if (response.EsCorrecto)
            {
                mensaje = "Producto creado";
            }
            else
            {
                respuesta = false;
                mensaje = "No se pudo crear";
            }
        }

        if (respuesta)
        {
            toastService.ShowSuccess(mensaje);
            //Utilizamos el navigate to para que podamos ir a nuestra página de usuarios
            _navServicio.NavigateTo("/productos");
        }
        else
        {
            toastService.ShowWarning(mensaje);
        }

    }
}
